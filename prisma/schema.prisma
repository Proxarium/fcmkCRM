// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}




model User {
  id           String        @id 
  username     String        @unique
  avatar       String?
  cover        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  medicalkits  MedicalKit[]  @relation(name: "MedicalKitToUser")
  ambulances   Ambulance[]   @relation(name: "AmbulanceToUser")
  statebrigades StateBrigade[] @relation(name: "UserToStateBrigade")
  deductions   DeductedMedication[]         

}

model MedicalKit {
  id           String        @id @default(cuid())
  name         String        @unique
  image        String?
  isTaken      Boolean       @default(false)
  takenBy      User?         @relation(name: "MedicalKitToUser", fields: [userId], references: [id])
  userId       String?
  statebrigades StateBrigade[] @relation(name: "MedicalKitToStateBrigade")
  equipment     EquipmentMedicalKit[]
  
  deductions   DeductedMedication[]
 
}

model EquipmentMedicalKit {
  id           String     @id @default(cuid())
  name         String
  fquantity    Int?
  quantity     Int
  desc         String?
  categories   Category[]
  available    Boolean    @default(true)
  medicalKit   MedicalKit @relation(fields: [medicalKitId], references: [id])
  medicalKitId String
  

}

model Category {
  id    String    @id @default(cuid())
  name  String
  equipMedicalKit EquipmentMedicalKit[]
  equipAmbulance  EquipmentAmbulance[]
  
}

model Ambulance {
  id           String        @id @default(cuid())
  number       String
  image        String?
  isTaken      Boolean       @default(false)
  takenBy      User?         @relation(name: "AmbulanceToUser", fields: [userId], references: [id])
  userId       String?
  statebrigades StateBrigade[] @relation(name: "AmbulanceToStateBrigade")
  equipment    EquipmentAmbulance[]
  
  
}              
  


model EquipmentAmbulance {
  id           String     @id @default(cuid())
  name         String
  fquantity    Int?
  quantity     Int
  desc         String?
  categories   Category[]
  available    Boolean    @default(true)
  ambulance    Ambulance  @relation(fields: [ambulanceId], references: [id])
  ambulanceId  String
  
}

model StateBrigade {
  id             String     @id @default(cuid())
  workStatus     Boolean
  takeDate       DateTime?
  returnDate     DateTime?
  commentTake    String?
  commentReturnKit  String?
  commentReturnAmbulance String?
  checkedKit    Boolean @default(false)
  checkedAmbulance   Boolean @default(false)
  checkedKitDate  DateTime?
  checkedAmbulanceDate  DateTime?
  medicalKit     MedicalKit @relation(name: "MedicalKitToStateBrigade", fields: [medicalKitId], references: [id])
  medicalKitId   String
  ambulance      Ambulance  @relation(name: "AmbulanceToStateBrigade", fields: [ambulanceId], references: [id])
  ambulanceId    String
  userTaker      User       @relation(name: "UserToStateBrigade", fields: [userTakerId], references: [id])
  userTakerId    String
 
}

model DeductedMedication {
  id             String             @id @default(uuid())
  callCardNumber String
  deductionDate  DateTime
  status         Boolean            @default(false)
  user           User               @relation(fields: [userId], references: [id])
  userId         String
  medicalKit     MedicalKit         @relation(fields: [medicalKitId], references: [id])
  medicalKitId   String
  items          DeductedItem[]
}

model DeductedItem {
  id                  String             @id @default(uuid())
  name                String
  quantity            Int
  deductedMedication  DeductedMedication @relation(fields: [deductedMedicationId], references: [id])
  deductedMedicationId String
}




